generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("LOCAL_POSTGRES_URL")
  shadowDatabaseUrl = env("LOCAL_SHADOW_DATABASE_URL")
}

model Answers {
  Id         String  @id(map: "PK_Answers") @db.Uuid
  AnswerText String
  CardId     String  @db.Uuid
  IsCorrect  Boolean
  Cards      Cards   @relation(fields: [CardId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Answers_Cards_CardId")

  @@index([CardId], map: "IX_Answers_CardId")
}

model Cards {
  Id        String      @id(map: "PK_Cards") @db.Uuid
  DeckId    String      @db.Uuid
  ImageUrl  String?
  CreatedAt DateTime    @db.Timestamptz(6)
  UpdatedAt DateTime    @db.Timestamptz(6)
  Name      String
  Answers   Answers[]
  Decks     Decks       @relation(fields: [DeckId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Cards_Decks_DeckId")
  Responses Responses[]

  @@index([DeckId], map: "IX_Cards_DeckId")
}

model Decks {
  Id          String        @id(map: "PK_Decks") @db.Uuid
  Description String?
  ImageUrl    String?
  CreatedAt   DateTime      @db.Timestamptz(6)
  UpdatedAt   DateTime      @db.Timestamptz(6)
  SubjectId   String        @db.Uuid
  Name        String
  Cards       Cards[]
  Subjects    Subjects      @relation(fields: [SubjectId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Decks_Subjects_SubjectId")
  Submissions Submissions[]

  @@index([SubjectId], map: "IX_Decks_SubjectId")
}

model Responses {
  Id              String      @id(map: "PK_Responses") @db.Uuid
  SubmissionId    String      @db.Uuid
  CardId          String      @db.Uuid
  AnswerId        String      @db.Uuid
  CorrectAnswerId String      @db.Uuid
  Cards           Cards       @relation(fields: [CardId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Responses_Cards_CardId")
  Submissions     Submissions @relation(fields: [SubmissionId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Responses_Submissions_SubmissionId")

  @@index([CardId], map: "IX_Responses_CardId")
  @@index([SubmissionId], map: "IX_Responses_SubmissionId")
}

model Subjects {
  Id          String   @id(map: "PK_Subjects") @db.Uuid
  Description String?
  CreatedAt   DateTime @db.Timestamptz(6)
  UpdatedAt   DateTime @db.Timestamptz(6)
  ImageUrl    String?
  Name        String
  Decks       Decks[]
}

model Submissions {
  Id        String      @id(map: "PK_Submissions") @db.Uuid
  CreatedAt DateTime    @db.Timestamptz(6)
  UpdatedAt DateTime    @db.Timestamptz(6)
  DeckId    String      @db.Uuid
  UserId    String?
  Responses Responses[]
  Decks     Decks       @relation(fields: [DeckId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Submissions_Decks_DeckId")

  @@index([DeckId], map: "IX_Submissions_DeckId")
}

model EFMigrationsHistory {
  MigrationId    String @id(map: "PK___EFMigrationsHistory") @db.VarChar(150)
  ProductVersion String @db.VarChar(32)

  @@map("__EFMigrationsHistory")
}

model AspNetRoleClaims {
  Id          Int         @id(map: "PK_AspNetRoleClaims") @default(autoincrement())
  RoleId      String
  ClaimType   String?
  ClaimValue  String?
  AspNetRoles AspNetRoles @relation(fields: [RoleId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_AspNetRoleClaims_AspNetRoles_RoleId")

  @@index([RoleId], map: "IX_AspNetRoleClaims_RoleId")
}

model AspNetRoles {
  Id               String             @id(map: "PK_AspNetRoles")
  Name             String?            @db.VarChar(256)
  NormalizedName   String?            @unique(map: "RoleNameIndex") @db.VarChar(256)
  ConcurrencyStamp String?
  AspNetRoleClaims AspNetRoleClaims[]
  AspNetUserRoles  AspNetUserRoles[]
}

model AspNetUserClaims {
  Id          Int         @id(map: "PK_AspNetUserClaims") @default(autoincrement())
  UserId      String
  ClaimType   String?
  ClaimValue  String?
  AspNetUsers AspNetUsers @relation(fields: [UserId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_AspNetUserClaims_AspNetUsers_UserId")

  @@index([UserId], map: "IX_AspNetUserClaims_UserId")
}

model AspNetUserLogins {
  LoginProvider       String
  ProviderKey         String
  ProviderDisplayName String?
  UserId              String
  AspNetUsers         AspNetUsers @relation(fields: [UserId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_AspNetUserLogins_AspNetUsers_UserId")

  @@id([LoginProvider, ProviderKey], map: "PK_AspNetUserLogins")
  @@index([UserId], map: "IX_AspNetUserLogins_UserId")
}

model AspNetUserRoles {
  UserId      String
  RoleId      String
  AspNetRoles AspNetRoles @relation(fields: [RoleId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_AspNetUserRoles_AspNetRoles_RoleId")
  AspNetUsers AspNetUsers @relation(fields: [UserId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_AspNetUserRoles_AspNetUsers_UserId")

  @@id([UserId, RoleId], map: "PK_AspNetUserRoles")
  @@index([RoleId], map: "IX_AspNetUserRoles_RoleId")
}

model AspNetUserTokens {
  UserId        String
  LoginProvider String
  Name          String
  Value         String?
  AspNetUsers   AspNetUsers @relation(fields: [UserId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_AspNetUserTokens_AspNetUsers_UserId")

  @@id([UserId, LoginProvider, Name], map: "PK_AspNetUserTokens")
}

model AspNetUsers {
  Id                   String             @id(map: "PK_AspNetUsers")
  UserName             String?            @db.VarChar(256)
  NormalizedUserName   String?            @unique(map: "UserNameIndex") @db.VarChar(256)
  Email                String?            @db.VarChar(256)
  NormalizedEmail      String?            @db.VarChar(256)
  EmailConfirmed       Boolean
  PasswordHash         String?
  SecurityStamp        String?
  ConcurrencyStamp     String?
  PhoneNumber          String?
  PhoneNumberConfirmed Boolean
  TwoFactorEnabled     Boolean
  LockoutEnd           DateTime?          @db.Timestamptz(6)
  LockoutEnabled       Boolean
  AccessFailedCount    Int
  AspNetUserClaims     AspNetUserClaims[]
  AspNetUserLogins     AspNetUserLogins[]
  AspNetUserRoles      AspNetUserRoles[]
  AspNetUserTokens     AspNetUserTokens[]

  @@index([NormalizedEmail], map: "EmailIndex")
}
