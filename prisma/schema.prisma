generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_URL")
  shadowDatabaseUrl = env("POSTGRES_PRISMA_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String    @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id])

  @@map("session")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([identifier, token])
  @@map("verification_request")
}

model Subject {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  imageUrl    String?  @map("image_url")
  decks       Deck[]

  @@map("subject")
}

model Deck {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String?  @db.VarChar(255)
  imageUrl    String?  @map("image_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  subjectId   Int      @map("subject_id")
  cards       Card[]
  subject     Subject  @relation(fields: [subjectId], references: [id])

  @@map("deck")
}

model Card {
  id            Int            @id @default(autoincrement())
  question      String         @db.VarChar(255)
  questionType  QuestionType   @map("question_type")
  deckId        Int            @map("deck_id")
  imageUrl      String?        @map("image_url")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  answers       Answer[]
  deck          Deck           @relation(fields: [deckId], references: [id])
  correctAnswer CorrectAnswer?

  @@map("card")
}

model Answer {
  id            Int            @id @default(autoincrement())
  answerText    String         @map("answer_text") @db.VarChar(255)
  cardId        Int            @map("card_id")
  card          Card           @relation(fields: [cardId], references: [id])
  CorrectAnswer CorrectAnswer?

  @@map("answer")
}

model CorrectAnswer {
  cardId   Int    @unique @map("card_id")
  answerId Int    @unique @map("answer_id")
  answer   Answer @relation(fields: [answerId], references: [id])
  card     Card   @relation(fields: [cardId], references: [id])

  @@unique([cardId, answerId])
  @@map("correct_answer")
}

enum QuestionType {
  MC
  TF

  @@map("question_type")
}
